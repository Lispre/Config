snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	name = re.sub(r'([A-Z])([a-z])', r'\1_\2', name)
	snip.rv = ('%s' % (name,)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */
endsnippet

snippet main "main() (main)"
int main(int argc, const char* argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet foi "for int loop (foi)"
foi (${4:int} ${2:i} = 0; $2 < ${1:n}; ${3:++$2})
	${0:/* code */}
endsnippet

snippet fori "for int loop (fori)"
fori (${4:int} ${2:i} = 0; $2 < ${1:n}; ${3:++$2})
{
	${0:/* code */}
}
endsnippet

snippet printf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet scanf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim:ft=snippets:
